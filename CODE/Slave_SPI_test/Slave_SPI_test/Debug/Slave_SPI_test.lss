
Slave_SPI_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000142  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000868  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000700  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000324  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000014c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000461  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000133  00000000  00000000  0000197d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  78:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z13SPI_SlaveInitv>:
#define SCK 5

void SPI_SlaveInit(void)
{
	/* Set MISO output, all others input */
	DDR_SPI = (1<<MISO);
  80:	80 e1       	ldi	r24, 0x10	; 16
  82:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI */
	SPCR = (1<<SPE);
  84:	80 e4       	ldi	r24, 0x40	; 64
  86:	8c bd       	out	0x2c, r24	; 44
  88:	08 95       	ret

0000008a <_Z16SPI_SlaveReceivev>:
}
char SPI_SlaveReceive(void)
{	
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
  8a:	0d b4       	in	r0, 0x2d	; 45
  8c:	07 fe       	sbrs	r0, 7
  8e:	fd cf       	rjmp	.-6      	; 0x8a <_Z16SPI_SlaveReceivev>
	;
	/* Return Data Register */
	return SPDR;
  90:	8e b5       	in	r24, 0x2e	; 46
}
  92:	08 95       	ret

00000094 <_Z5Blinkv>:

void Blink(){
	
	PORTC |= (1<<0);
  94:	88 b1       	in	r24, 0x08	; 8
  96:	81 60       	ori	r24, 0x01	; 1
  98:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f e3       	ldi	r18, 0x3F	; 63
  9c:	8d e0       	ldi	r24, 0x0D	; 13
  9e:	93 e0       	ldi	r25, 0x03	; 3
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <_Z5Blinkv+0xc>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <_Z5Blinkv+0x16>
  aa:	00 00       	nop
	_delay_ms(1000);
	PORTC &= ~(1<<0);
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	88 b9       	out	0x08, r24	; 8
  b2:	2f e3       	ldi	r18, 0x3F	; 63
  b4:	8d e0       	ldi	r24, 0x0D	; 13
  b6:	93 e0       	ldi	r25, 0x03	; 3
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <_Z5Blinkv+0x24>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <_Z5Blinkv+0x2e>
  c2:	00 00       	nop
	_delay_ms(1000);
	PORTC |= (1<<1);
  c4:	88 b1       	in	r24, 0x08	; 8
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	88 b9       	out	0x08, r24	; 8
  ca:	2f e3       	ldi	r18, 0x3F	; 63
  cc:	8d e0       	ldi	r24, 0x0D	; 13
  ce:	93 e0       	ldi	r25, 0x03	; 3
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <_Z5Blinkv+0x3c>
  d8:	00 c0       	rjmp	.+0      	; 0xda <_Z5Blinkv+0x46>
  da:	00 00       	nop
	_delay_ms(1000);
	PORTC &= ~(1<<1);
  dc:	88 b1       	in	r24, 0x08	; 8
  de:	8d 7f       	andi	r24, 0xFD	; 253
  e0:	88 b9       	out	0x08, r24	; 8
  e2:	2f e3       	ldi	r18, 0x3F	; 63
  e4:	8d e0       	ldi	r24, 0x0D	; 13
  e6:	93 e0       	ldi	r25, 0x03	; 3
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <_Z5Blinkv+0x54>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <_Z5Blinkv+0x5e>
  f2:	00 00       	nop
  f4:	08 95       	ret

000000f6 <main>:
}

int main(void)
{
	/* initialiser le slave SPI */
	SPI_SlaveInit();
  f6:	0e 94 40 00 	call	0x80	; 0x80 <_Z13SPI_SlaveInitv>
	/* mettre les deux portes en sortie */
	DDRC |= (1<<0)|(1<<1);
  fa:	87 b1       	in	r24, 0x07	; 7
  fc:	83 60       	ori	r24, 0x03	; 3
  fe:	87 b9       	out	0x07, r24	; 7
	/* test de lumière pour confirmer */
	Blink();
 100:	0e 94 4a 00 	call	0x94	; 0x94 <_Z5Blinkv>
	char transmit[] = {0x21,0x22,0x33};
	
	while (1)
	{
		
		char receive = SPI_SlaveReceive();
 104:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16SPI_SlaveReceivev>
		
		
		if(receive == 0x55){
 108:	85 35       	cpi	r24, 0x55	; 85
 10a:	29 f4       	brne	.+10     	; 0x116 <main+0x20>
			SPDR = 0x51;
 10c:	91 e5       	ldi	r25, 0x51	; 81
 10e:	9e bd       	out	0x2e, r25	; 46
			PORTC |= (1<<0);
 110:	98 b1       	in	r25, 0x08	; 8
 112:	91 60       	ori	r25, 0x01	; 1
 114:	98 b9       	out	0x08, r25	; 8
		}
		if(receive == 0x33){
 116:	83 33       	cpi	r24, 0x33	; 51
 118:	29 f4       	brne	.+10     	; 0x124 <main+0x2e>
			SPDR = 0x31;
 11a:	91 e3       	ldi	r25, 0x31	; 49
 11c:	9e bd       	out	0x2e, r25	; 46
			PORTC |= (1<<1);
 11e:	98 b1       	in	r25, 0x08	; 8
 120:	92 60       	ori	r25, 0x02	; 2
 122:	98 b9       	out	0x08, r25	; 8
		}
		if(receive == 0x44){
 124:	84 34       	cpi	r24, 0x44	; 68
 126:	71 f7       	brne	.-36     	; 0x104 <main+0xe>
			SPDR = 0xAA;
 128:	8a ea       	ldi	r24, 0xAA	; 170
 12a:	8e bd       	out	0x2e, r24	; 46
			PORTC &= ~(1<<0);
 12c:	88 b1       	in	r24, 0x08	; 8
 12e:	8e 7f       	andi	r24, 0xFE	; 254
 130:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<1);
 132:	88 b1       	in	r24, 0x08	; 8
 134:	8d 7f       	andi	r24, 0xFD	; 253
 136:	88 b9       	out	0x08, r24	; 8
		}
		
	}	
	
	return(0);
}
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	08 95       	ret

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
